import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';

export type RessourceTypes =  'foobar'|'bar'|'foo';

export interface Ressource {
  amount: number;
  allocatedRobots: number;
}

export interface RobotsState {
  ressources: {
    foobar: Ressource;
    bar: Ressource;
    foo: Ressource;
  }
  availableRobots: number;
  occupiedRobots: number;
}

const initialState: RobotsState = {
  ressources: {
    foobar: {
      amount:0,
      allocatedRobots:0,
    },
    bar: {
      amount:0,
      allocatedRobots:0,
    },
    foo:{
      amount:0,
      allocatedRobots:0,
    }, 
  },
  availableRobots: 2,
  occupiedRobots: 0,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const robotsSlice = createSlice({
  name: 'robots',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    occupyRobot: (state, action: PayloadAction<{ ressourceType: RessourceTypes }>) => {
      const { ressourceType } = action.payload;

      if(state.ressources[ressourceType].allocatedRobots > 0) {
        state.ressources[ressourceType].allocatedRobots--;
        state.occupiedRobots++;
      }
    },
  
    allocateRobot: (state, action: PayloadAction<{ ressourceType: RessourceTypes }>) => {
      const { ressourceType } = action.payload;

      if(state.availableRobots > 0) {
        state.ressources[ressourceType].allocatedRobots ++;
        state.availableRobots --;
      }
    },
    makeRobotAvailable (state) {
      if(state.occupiedRobots > 0) {
          state.availableRobots ++;
          state.occupiedRobots --;
      }
    },
    buyRobot (state) {
      if(state.ressources.foobar.amount >= 3 && state.ressources.foo.amount >= 6) {
        state.availableRobots ++;
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
  },
});

export const { buyRobot, makeRobotAvailable, allocateRobot, occupyRobot } = robotsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectRobotState = (state: RootState) => state.robots;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export const deallocateRobot = ( oldRessource: RessourceTypes): AppThunk => async (
  dispatch,
  getState
) => {
  const { ressources } = selectRobotState(getState());

  if(ressources[oldRessource].allocatedRobots > 0) {
    dispatch(occupyRobot({ressourceType: oldRessource }));
    await new Promise((resolve) => setTimeout(resolve, 5000));
    dispatch(makeRobotAvailable());
  }
}

export default robotsSlice.reducer;
